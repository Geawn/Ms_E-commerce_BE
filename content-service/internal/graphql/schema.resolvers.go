package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"strconv"

	"github.com/Geawn/Ms_E-commerce_BE/content-service/internal/models"
)

// ID is the resolver for the id field.
func (r *categoryResolver) ID(ctx context.Context, obj *models.Category) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// ID is the resolver for the id field.
func (r *collectionResolver) ID(ctx context.Context, obj *models.Collection) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// ID is the resolver for the id field.
func (r *menuItemResolver) ID(ctx context.Context, obj *models.MenuItem) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// ID is the resolver for the id field.
func (r *pageResolver) ID(ctx context.Context, obj *models.Page) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// Page is the resolver for the page field.
func (r *queryResolver) Page(ctx context.Context, slug string) (*models.Page, error) {
	return r.PageService.GetBySlug(ctx, slug)
}

// Menu is the resolver for the menu field.
func (r *queryResolver) Menu(ctx context.Context, slug string, channel string) (*models.Menu, error) {
	return r.MenuService.GetBySlugAndChannel(ctx, slug, channel)
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Collection returns CollectionResolver implementation.
func (r *Resolver) Collection() CollectionResolver { return &collectionResolver{r} }

// MenuItem returns MenuItemResolver implementation.
func (r *Resolver) MenuItem() MenuItemResolver { return &menuItemResolver{r} }

// Page returns PageResolver implementation.
func (r *Resolver) Page() PageResolver { return &pageResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type collectionResolver struct{ *Resolver }
type menuItemResolver struct{ *Resolver }
type pageResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
