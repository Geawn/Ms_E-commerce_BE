package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/Geawn/Ms_E-commerce_BE/user-service/internal/middleware"
	"github.com/Geawn/Ms_E-commerce_BE/user-service/internal/models"
)

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	log.Println("Resolver: Me called")
	
	userID, ok := ctx.Value(middleware.UserIDKey).(string)
	if !ok {
		log.Println("Resolver: User ID not found in context")
		return nil, fmt.Errorf("unauthorized: user ID not found in context")
	}
	
	log.Printf("Resolver: User ID from context: %s", userID)

	user, err := r.UserService.GetCurrentUser(ctx, userID)
	if err != nil {
		log.Printf("Resolver: Error getting user: %v", err)
		return nil, fmt.Errorf("failed to get user: %v", err)
	}
	
	log.Printf("Resolver: User found: %+v", user)
	return user, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// Avatar is the resolver for the avatar field.
func (r *userResolver) Avatar(ctx context.Context, obj *models.User) (*models.Avatar, error) {
	return obj.Profile.Avatar, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
